#########################
Count Objects in a Bucket
#########################

allfiles = [object.key for object in my_bucket.objects.all()]
jpgs = [object.key for object in my_bucket.objects.all() if 'jpg' in object.key]
len(allfiles), len(jpgs)

###########
Bucket Size
###########

s3client = boto3.client('s3')
response = s3client.list_objects(Bucket=aws_bucket_name)['Contents']
bucket_size = sum(obj['Size'] for obj in response)
bucket_size


###############
Create a bucket
###############

def create_bucket(bucket_name, region=None):
    """Create an S3 bucket in a specified region

    If a region is not specified, the bucket is created in the S3 default
    region (us-east-1).

    :param bucket_name: Bucket to create
    :param region: String region to create bucket in, e.g., 'us-west-2'
    :return: True if bucket created, else False
    """

    # Create bucket
    try:
        if region is None:
            s3_client = boto3.client('s3')
            s3_client.create_bucket(Bucket=bucket_name)
        else:
            s3_client = boto3.client('s3', region_name=region)
            location = {'LocationConstraint': region}
            s3_client.create_bucket(Bucket=bucket_name,
                                    CreateBucketConfiguration=location)
    except ClientError as e:
        logging.error(e)
        return False
    return True



#############
Bucket Region
#############

aws_bucket_name = 's3bcrgodevaic01'
boto3.client("s3").get_bucket_location(Bucket=aws_bucket_name)['LocationConstraint'] 


####################################################################
Using boto3 you can set aws credentials and download dataset from S3
####################################################################

import boto3
import os

# set aws credentials
s3r = boto3.resource('s3', aws_access_key_id='xxxxxxxxxxxxxxxxx',
aws_secret_access_key='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
bucket = s3r.Bucket('bucket_name')

# downloading folder
prefix = 'dirname'
for object in bucket.objects.filter(Prefix = 'dirname'):
    if object.key == prefix:
       os.makedirs(os.path.dirname(object.key), exist_ok=True)
       continue;
    bucket.download_file(object.key, object.key)
